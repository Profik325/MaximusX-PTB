import logging
from datetime import datetime, timedelta
from random import randint

from pyexpat.errors import messages
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Message
from telegram.constants import ChatMemberStatus
from telegram.ext import (filters, CallbackQueryHandler, Application,
    MessageHandler, ConversationHandler, CommandHandler,
    ContextTypes, ChatMemberHandler)
import asyncio
import math
from functools import partial

from SQLtables import *
from config import BOT_TOKEN, forbidden
from Poker import *

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è Conversation Handler
CHOOSING, BET, GAME = range(3)
TAKING_CREDIT, REPLY_MESSAGE, WHY_CREDIT = range(3)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
create_table_users()
create_table_chats()
create_table_credits()
admin_id = '5724899384'
game_type = ''


async def start(update, context):
    user = update.effective_user
    await check_user(user, update, context)

    await update.message.reply_text(
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/work - –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å\n"
        "/dice - –∏–≥—Ä–∞ –≤ –∫—É–±–∏–∫\n"
        "/slots - –∏–≥—Ä–æ–≤—ã–µ –∞–≤—Ç–æ–º–∞—Ç—ã\n"
        "/balance - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å"
    )
    if update.message.text == '–ö—É–±–∏–∫':
        return await dice(update, context)
    if update.message.text == '–°–ª–æ—Ç—ã':
        return await slots(update, context)


# –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ —Ä–∞–∑–ª–µ—á–µ–Ω–∏—è –∏ –∑–∞—Ä–∞–±–æ—Ç–æ–∫

async def work(update, context):
    good_job = False
    user = update.effective_user
    cooldown = timedelta(hours=3, minutes=1)
    last_work = context.user_data.get("last_work")
    await check_user(user, update, context)
    level = await set_get_job_lvl(user)
    jobs_to_lvlup = round(8 * (level ** 1.3) / (1 + 0.15 * level)) + 2
    bonuses_to_lvlup = round(1.5 * (level ** 2.0) / (1 + 0.2 * level)) + 1

    if last_work and (datetime.now() - last_work) < cooldown:
        remaining = cooldown - (datetime.now() - last_work)
        if remaining > timedelta(hours=1):
            hr = '—á–∞—Å' if remaining.seconds // 3600 == 1 else '—á–∞—Å–∞'
            mn = '–º–∏–Ω—É—Ç—É' if remaining.seconds % 3600 // 60 == 1 else '–º–∏–Ω—É—Ç'
            if remaining.seconds % 3600 // 60 != 0:
                await update.message.reply_text(
                    f"‚è≥ –°–ª–µ–¥—É—é—â–∞—è —Ä–∞–±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ "
                    f"{remaining.seconds // 3600} {hr} {remaining.seconds % 3600 // 60} {mn}.")
                return
            await update.message.reply_text(
                f"‚è≥ –°–ª–µ–¥—É—é—â–∞—è —Ä–∞–±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ "
                f"{remaining.seconds // 3600} {hr}.")
            return
        mn = '–º–∏–Ω—É—Ç–∞' if remaining.seconds // 60 == 1 else '–º–∏–Ω—É—Ç'
        await update.message.reply_text(f"‚è≥ –°–ª–µ–¥—É—é—â–∞—è —Ä–∞–±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {remaining.seconds // 60} {mn}.")
        return

    salary = randint(10, 102)
    if salary >= 100: salary, good_job = randint(100, 500) * 5, True
    salary = int((salary + (salary * (level * 0.1))) // 1)
    context.user_data["last_work"] = datetime.now()

    current_balance = await get_balance(user)
    global_cursor.execute("INSERT OR REPLACE INTO users (userid, username, balance) VALUES (?, ?, ?)",
                          (user.id, user.username, current_balance + salary))
    global_db.commit()

    if not good_job:
        await set_get_jobs_bonuses_done(user, 1)
        await update.message.reply_text(
            f"üíµ –í—ã –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏ –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {salary}! –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {await get_balance(user)}."
            f"–î–æ –ø–æ–≤—ã—à–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å –µ—â–µ {jobs_to_lvlup - 1} —Ä–∞–∑ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å {bonuses_to_lvlup} –ø—Ä–µ–º–∏–π.")
    else:
        await set_get_jobs_bonuses_done(user, 1, True)
        await update.message.reply_text(
            f"üí∞ –í—ã –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–∞ —Å–ª–∞–≤—É –∏ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–µ–º–∏—é, –∑–∞—Ä–∞–±–æ—Ç–∞–≤ {salary}! –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: "
            f"{await get_balance(user)}\n"
            f"–î–æ –ø–æ–≤—ã—à–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å –µ—â–µ {jobs_to_lvlup} —Ä–∞–∑ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å {bonuses_to_lvlup - 1} –ø—Ä–µ–º–∏–π.")

    jobs_done, bonuses_obtained = (await set_get_jobs_bonuses_done(user),
                                   await set_get_jobs_bonuses_done(user, bonuses=True))
    if jobs_done == jobs_to_lvlup or bonuses_obtained == bonuses_to_lvlup:
        await set_get_job_lvl(user, 1)
        await set_get_jobs_bonuses_done(user, reset=True)
        await update.message.reply_text(
            f"üëè –í—ã —Ç–∞–∫ —Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–ª–∏, —á—Ç–æ –≤–∞—Å –ø–æ–≤—ã—Å–∏–ª–∏ –¥–æ —É—Ä–æ–≤–Ω—è {level + 2}! –¢–µ–ø–µ—Ä—å –≤–∞—à –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫ "
            f"–∑–∞—Ä–ø–ª–∞—Ç–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {(level + 2) * 0.1 + 1.0}.")


async def dice_command(update, context):
    context.user_data["game_type"] = "–ö—É–±–∏–∫"
    return await start_game(update, context)


async def slots_command(update, context):
    context.user_data["game_type"] = "–°–ª–æ—Ç—ã"
    return await start_game(update, context)


async def start_game(update, context):
    await check_user(update.effective_user, update, context)
    global game_type
    game_type = context.user_data.get("game_type", "–ò–≥—Ä–∞")
    # print(game_type)
    cooldown = timedelta(minutes=1)

    if game_type == "–ö—É–±–∏–∫" and context.user_data.get('last_dice_rolled') and \
            (datetime.now() - context.user_data.get('last_dice_rolled')) < cooldown:
        remaining = cooldown - (datetime.now() - context.user_data.get('last_dice_rolled'))
        await update.message.reply_text(f"‚è≥ –í—ã —É–∂–µ –∫–∏–¥–∞–ª–∏ –∫—É–±–∏–∫ –Ω–µ–¥–∞–≤–Ω–æ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {remaining.seconds} —Å–µ–∫—É–Ω–¥.",
                                        reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

    elif game_type == "–°–ª–æ—Ç—ã" and context.user_data.get('last_slots_rolled') and \
            (datetime.now() - context.user_data.get('last_slots_rolled')) < cooldown:
        remaining = cooldown - (datetime.now() - context.user_data.get('last_slots_rolled'))
        await update.message.reply_text(f"‚è≥ –í—ã —É–∂–µ –∫—Ä—É—Ç–∏–ª–∏ —Å–ª–æ—Ç—ã –Ω–µ–¥–∞–≤–Ω–æ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {remaining.seconds} —Å–µ–∫—É–Ω–¥.",
                                        reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

    if context.chat_data.get('is_dice_rolling') and game_type == "–ö—É–±–∏–∫":
        await update.message.reply_text(f"‚è≥ –ö—Ç–æ-—Ç–æ —É–∂–µ –∫–∏–¥–∞–µ—Ç –∫—É–±–∏–∫.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

    elif context.chat_data.get('is_slots_rolling') and game_type == "–°–ª–æ—Ç—ã":
        await update.message.reply_text(f"‚è≥ –ö—Ç–æ-—Ç–æ —É–∂–µ –∫—Ä—É—Ç–∏—Ç —Å–ª–æ—Ç—ã.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

    if game_type == "–ö—É–±–∏–∫":
        context.chat_data["is_dice_rolling"] = True
    elif game_type == "–°–ª–æ—Ç—ã":
        context.chat_data["is_slots_rolling"] = True
    msg = await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–¢–æ–ª—å–∫–æ —á–∏—Å–ª–æ!) –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n–ù–∞–ø–∏—à–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª, —á—Ç–æ–±—ã –ø—Ä–µ—Ä–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ.")
    context.chat_data['bet_msg_to_reply'] = msg.id
    return BET


async def process_bet(update, context):
    user = update.effective_user
    if not update.message.reply_to_message or update.message.reply_to_message.from_user.id != context.bot.id or \
            context.chat_data.get('bet_msg_to_reply') != update.message.reply_to_message.id:
        return BET
    try:
        bet = int(update.message.text)
        if context.user_data.get("game_type") == "–ö—É–±–∏–∫" and (bet < 10 or bet > 5000):
            await update.message.reply_text("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –≤ ¬´–ö—É–±–∏–∫–µ¬ª ‚îÄ 10, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è ‚îÄ 5000.")
            return BET
        elif context.user_data.get("game_type") == "–°–ª–æ—Ç—ã" and (bet < 500 or bet > 1000000):
            await update.message.reply_text("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –≤ ¬´–°–ª–æ—Ç–∞—Ö¬ª ‚îÄ 500, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è ‚îÄ 1000000.")
            return BET
        if bet > int(await get_balance(user)):
            await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
            return BET

        context.user_data["current_bet"] = bet
        try:
            await check_user(user, update, context)
            global_cursor.execute("""
            UPDATE users SET balance = balance + ? WHERE userid = ?""", (-bet, user.id))
            global_db.commit()
        except Exception:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ —Å–Ω—è—Ç–∏–µ–º –¥–µ–Ω–µ–≥ —Å —Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞ @Profik_X",
                reply_markup=ReplyKeyboardRemove())
            raise ValueError("Could not find userid in users - SQL")

        if context.user_data.get("game_type") == "–ö—É–±–∏–∫":
            return await dice(update, context)
        if context.user_data.get("game_type") == "–°–ª–æ—Ç—ã":
            return await slots(update, context)

    except ValueError:
        if not update.message.text == '–û—Ç–º–µ–Ω–∞':
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
            return BET
        return await cancel(update, context)


async def dice(update, context):
    user = update.effective_user
    # await update.message.reply_dice("–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ö—Ä—É—Ç–∏–º –∫—É–±–∏–∫...")
    dice_message = await update.message.reply_dice(emoji="üé≤")
    value = dice_message.dice.value

    if value <= 3:
        win = 0
    elif value == 4:
        win = context.user_data["current_bet"] * 1
    elif value == 5:
        win = context.user_data["current_bet"] * 1.5
    else:
        win = context.user_data["current_bet"] * 3

    await asyncio.sleep(3.5)

    if win:
        await update.message.reply_text(
            f"üé≤ –ù–∞ –∫—É–±–∏–∫–µ –≤—ã–ø–∞–ª–æ {value}. \n"
            f'‚úÖ –í—ã–∏–≥—Ä—ã—à! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {int(win // 1)}! \n'
            f'–¢–µ–ø–µ—Ä—å –≤–∞—à –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {int(await get_balance(user) + win)}.',
            reply_markup=ReplyKeyboardRemove())
    else:
        await update.message.reply_text(
            f"üé≤ –ù–∞ –∫—É–±–∏–∫–µ –≤—ã–ø–∞–ª–æ {value}. \n"
            f'‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à! –í—ã –≤—Å–µ –ø–æ—Ç–µ—Ä—è–ª–∏. \n'
            f'–¢–µ–ø–µ—Ä—å –≤–∞—à –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {int(await get_balance(user) + win)}.',
            reply_markup=ReplyKeyboardRemove())

    context.user_data["last_dice_rolled"] = datetime.now()
    del context.chat_data["is_dice_rolling"]

    try:
        await check_user(user, update, context)
        global_cursor.execute("""UPDATE users SET balance = balance + ? WHERE userid = ?""",
                              (win, user.id))
        global_db.commit()
    except Exception:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ–º –¥–µ–Ω–µ–≥ –Ω–∞ —Å—á–µ—Ç, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞ @Profik_X",
            reply_markup=ReplyKeyboardRemove())
        raise ValueError("Could not find userid in users - SQL")

    return ConversationHandler.END


async def slots(update, context):
    user = update.effective_user
    two_combinations = (39, 2, 35, 54, 49, 42, 47, 1, 2, 35, 38, 26, 11, 21,
                                 26, 24, 6, 38, 41, 27, 23, 24, 38, 18, 44, 42, 2, 33,
                                 17, 49, 3, 9, 4, 33, 13, 5)
    three_combinations = (22, 1)  # 22 - 3 blueberries
    two_of_sevens = (32, 52, 61, 62, 16, 56, 63, 60, 48)
    three_of_sevens = 64
    two_of_bars = (2, 33, 17, 49, 3, 9, 4, 33, 13, 5)
    three_of_bars = 1
    slot_message = await update.message.reply_dice(emoji="üé∞")
    value = slot_message.dice.value
    logger.log(50, 'slots.dice value = '+ str(value))
    bet = context.user_data.get('current_bet', 0)

    if value == 64:
        win = int(bet * 10)
        amount_result = '–≤—ã–ø–∞–ª–æ —Ç—Ä–∏ —Å–µ–º–µ—Ä–∫–∏! –î–ñ–ï–ö–ü–û–¢!'
        result = 'üéâ –î–ñ–ï–ö–ü–û–¢!'
    elif value in three_combinations:
        win = int(bet * 5)
        amount_result = '–≤—ã–ø–∞–ª–æ —Ç—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞!'
        result = 'üéâ –ë–æ–ª—å—à–∞—è —É–¥–∞—á–∞!'
    elif value in two_of_sevens:
        win = int(bet * 3)
        amount_result = '–≤—ã–ø–∞–ª–æ –¥–≤–µ —Å–µ–º–µ—Ä–∫–∏!'
        result = '‚úÖ –í—ã–∏–≥—Ä—ã—à!'
    elif value in two_combinations:
        win = int(bet * 1.25)
        amount_result = '–≤—ã–ø–∞–ª–æ –¥–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞.'
        result = '‚úÖ –í—ã–∏–≥—Ä—ã—à!'
    else:
        win = 0
        amount_result = '–Ω–µ –≤—ã–ø–∞–ª–æ –Ω–∏ –æ–¥–Ω–æ–π –ø–∞—Ä—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.'
        result = 'üí• –ü—Ä–æ–∏–≥—Ä—ã—à!'

    await asyncio.sleep(3.5)

    if win: await update.message.reply_text(
        f" üé∞ –†–µ–∑—É–ª—å—Ç–∞—Ç: {amount_result} \n"
        f'{result} –í—ã –ø–æ–ª—É—á–∏–ª–∏ {int(win // 1)}! \n'
        f'–¢–µ–ø–µ—Ä—å –≤–∞—à –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {int(await get_balance(user) + win)}.',
        reply_markup=ReplyKeyboardRemove())
    else: await update.message.reply_text(
        f'{result} –í—ã –≤—Å–µ –ø–æ—Ç–µ—Ä—è–ª–∏. \n'
        f'–¢–µ–ø–µ—Ä—å –≤–∞—à –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {int(await get_balance(user) + win)}.',
        reply_markup=ReplyKeyboardRemove())

    try:
        await check_user(user, update, context)
        global_cursor.execute("""UPDATE users SET balance = balance + ? WHERE userid = ?""",
                              (win, user.id))
        global_db.commit()
    except Exception:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ–º –¥–µ–Ω–µ–≥ –Ω–∞ —Å—á–µ—Ç, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞ @Profik_X",
            reply_markup=ReplyKeyboardRemove())
        raise ValueError("Could not find userid in users - SQL")

    context.user_data["last_slots_rolled"] = datetime.now()
    del context.chat_data["is_slots_rolling"]

    return ConversationHandler.END


async def cancel(update, context):
    await context.bot.send_message(
        chat_id=update.effective_chat.id,  # ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
        text="‚ùå –û—Ç–º–µ–Ω–∞... –î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.")
    '''
    await context.bot.edit_message_reply_markup(
        chat_id=update.effective_chat.id,
        message_id=context.user_data['inline_keyboard_message_id'],  # ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        reply_markup=None  # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )'''
    if game_type == "–ö—É–±–∏–∫": del context.chat_data["is_dice_rolling"]
    if game_type == "–°–ª–æ—Ç—ã": del context.chat_data["is_slots_rolling"]
    if context.chat_data.get('is_getting_credit'): del context.chat_data['is_getting_credit']
    if context.user_data.get('credit_amount'): del context.user_data['credit_amount']
    if context.chat_data.get('credit_msg_to_reply'): del context.chat_data['credit_msg_to_reply']
    if context.chat_data.get('why_msg_to_reply'): del context.chat_data['why_msg_to_reply']
    return ConversationHandler.END


  # —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ —ç–∫–æ–Ω–æ–º–∏–∫—É –±–æ—Ç–∞

async def add_money(update, context):
    if update.message.reply_to_message:
        amount = update.message.text.split()[1] if len(update.message.text.split()) == 2 else (
            update.message.text.split())[2]
        user = update.message.reply_to_message.from_user.username
    else:
        amount = update.message.text.split()[1] if len(update.message.text.split()) == 3 else (
            update.message.text.split())[2]
        user = update.message.text.split()[2].lstrip('@') if len(update.message.text.split()) == 3 else (
            update.message.text.split())[3].lstrip('@')

    try:
        if int(amount) <= 0:
            await update.message.reply_text("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 0.")
            return
    except Exception:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return



    await check_user(user, update, context, isusername=True)
    userid = global_cursor.execute("""SELECT userid FROM users WHERE username = ?""",
                                   (user,)).fetchone()[0]
    if not str(update.effective_user.id) == admin_id:
        if update.message.text == '–í—ã–ø–∏—Å–∞—Ç—å —á–µ–∫': return await transfer_money(update, context)
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    try:
        global_cursor.execute("""UPDATE users SET balance = balance + ? WHERE userid = ?""",
                              (amount, userid))
        global_db.commit()
    except Exception:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ–º –¥–µ–Ω–µ–≥ –Ω–∞ —Å—á–µ—Ç.")
        raise ValueError("Could not find userid in users - SQL")
    await update.message.reply_text("‚úÖ –î–µ–Ω—å–≥–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ —Å—á–µ—Ç.")
    # await update.message.reply_text("‚úÖ –°–æ—Å–∏ –º–æ–π –ø–µ–Ω–∏—Å, —Ö—É–∏–ª–∞.")


async def transfer_money(update, context):
    if update.message.reply_to_message:
        user_send_to = update.message.reply_to_message.from_user
        amount = update.message.text.split()[1] if len(update.message.text.split()) == 2 else (
            update.message.text.split())[2]
        isusername = False
    else:
        amount = update.message.text.split()[1] if len(update.message.text.split()) == 3 else (
            update.message.text.split())[2]
        user_send_to = update.message.text.split()[2].lstrip('@') if len(update.message.text.split()) == 3 else (
            update.message.text.split())[3].lstrip('@')
        isusername = True

    if int(amount) < 10:
        await update.message.reply_text("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ - 10.")
        return

    user_send_from = update.message.from_user

    await check_user(user_send_from, update, context)
    if not await check_user(user_send_to, update, context, isusername=isusername, send_msg=False):
        await update.message.reply_text("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –Ω–∞–ø–∏—Å–∞—Ç—å /start.")
        return

    if int(amount) > global_cursor.execute("""SELECT balance FROM users WHERE userid = ?""",
                                   (user_send_from.id,)).fetchone()[0]:
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç—É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.")
        return

    global_cursor.execute("""UPDATE users SET balance = balance + ? WHERE userid = ?""",
                          (-int(amount), user_send_from.id,))
    global_db.commit()
    if isusername:
        global_cursor.execute("""UPDATE users SET balance = balance + ? WHERE username = ?""",
                              (amount, user_send_to, ))
        await update.message.reply_text(
            f"‚úÖ –î–µ–Ω—å–≥–∏ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã –Ω–∞ —Å—á–µ—Ç {user_send_to} —Å —Å—á–µ—Ç–∞ {user_send_from.username}.")
    else:
        global_cursor.execute("""UPDATE users SET balance = balance + ? WHERE username = ?""",
                              (amount, user_send_to.id,))
        await update.message.reply_text(
            f"‚úÖ –î–µ–Ω—å–≥–∏ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã –Ω–∞ —Å—á–µ—Ç {user_send_to.username} —Å —Å—á–µ—Ç–∞ {user_send_from.username}.")

    global_db.commit()


async def balance(update, context):
    await check_user(update.effective_user, update, context)
    user = update.effective_user
    if update.message.reply_to_message:  # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        replier = update.message.reply_to_message.from_user.username
        await others_balance(update, context, userN=replier)
        return
    credit_amount = global_cursor.execute("""SELECT current_credit FROM credits WHERE userid = ?""",
                                          (user.id,)).fetchone()[0]
    global_db.commit()
    if credit_amount:
        await update.message.reply_text(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {await get_balance(user)}\n"
                                        f"üßæ –í–∞—à–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –±–∞–Ω–∫—É: {credit_amount}")
        return
    await update.message.reply_text(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {await get_balance(user)}")


async def others_balance(update, context, userN=None):
    await check_user(update.effective_user, update, context)
    user = userN if userN else update.message.text.split()[1].lstrip('@')

    try:
        await check_user(user, update, context, isusername=True)
        await update.message.reply_text(f"üí∞ –ë–∞–ª–∞–Ω—Å {user}: {await get_balance(user, isusername=True)}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        raise e


  # –∫—Ä–µ–¥–∏—Ç—ã –∏ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏

async def credit_command(update, context):
    await check_user(update.effective_user)
    if context.chat_data.get('is_getting_credit'):
        await update.message.reply_text(f"‚è≥ –í—Å—Ç–∞–Ω—å—Ç–µ –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –∫—Ä–µ–¥–∏—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.",
                                        reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
    if global_cursor.execute(
            """SELECT current_credit FROM credits WHERE userid = ?""",
            (update.effective_user.id,)).fetchone()[0]:
        await update.message.reply_text(f"‚ùå –í—ã –µ—â–µ –Ω–µ –ø–æ–≥–∞—Å–∏–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫—Ä–µ–¥–∏—Ç.",
                                        reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
    context.chat_data['is_getting_credit'] = True
    return await take_credit(update, context)


async def take_credit(update, context):
    msg = update.message.text
    await check_user(update.effective_user)
    if len(msg.split()) <= 2:
        reply_msg = await update.message.reply_text(
        """–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å –≤ –∫—Ä–µ–¥–∏—Ç (–¢–æ–ª—å–∫–æ —á–∏—Å–ª–æ!) –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
–ù–∞–ø–∏—à–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª, —á—Ç–æ–±—ã –ø—Ä–µ—Ä–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ.""")
        context.chat_data['credit_msg_to_reply'] = reply_msg.id
        return REPLY_MESSAGE

    else:
        amount = update.message.text.split()[2] if len(update.message.text.split()) == 3 else (
            update.message.text.split())[3]
        amount = int(amount)
        if amount == 50 or amount > 10000:
            await update.message.reply_text(
                """‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞, –∫–æ—Ç–æ—Ä—É—é –Ω–∞—à –±–∞–Ω–∫ –º–æ–∂–µ—Ç –≤—ã–¥–∞—Ç—å ‚îÄ 50, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è ‚îÄ 10000.""")
            return ConversationHandler.END
        user = update.message.from_user
        why_msg = await update.message.reply_text("""–î–ª—è –∫–∞–∫–∏—Ö —Ü–µ–ª–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å —ç—Ç–æ—Ç –∫—Ä–µ–¥–∏—Ç?""")
        context.chat_data['why_msg_to_reply'] = why_msg.id
        context.user_data['credit_amount'] = amount
        return WHY_CREDIT


async def reply_message_credit(update, context):
    if not update.message.reply_to_message or update.message.reply_to_message.from_user.id != context.bot.id or \
            context.chat_data.get('credit_msg_to_reply') != update.message.reply_to_message.id:
        return REPLY_MESSAGE
    try:
        if int(update.message.text) < 50 or int(update.message.text) > 10000:
            await update.message.reply_text(
                """‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞, –∫–æ—Ç–æ—Ä—É—é –Ω–∞—à –±–∞–Ω–∫ –º–æ–∂–µ—Ç –≤—ã–¥–∞—Ç—å ‚îÄ 50, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è ‚îÄ 10000.""")

            if context.chat_data.get('is_getting_credit'): del context.chat_data['is_getting_credit']
            if context.user_data.get('credit_amount'): del context.user_data['credit_amount']
            if context.chat_data.get('credit_msg_to_reply'): del context.chat_data['credit_msg_to_reply']
            if context.chat_data.get('why_msg_to_reply'): del context.chat_data['why_msg_to_reply']

            return ConversationHandler.END
        context.user_data['credit_amount'] = int(update.message.text)
        why_msg = await update.message.reply_text(
            """–î–ª—è –∫–∞–∫–∏—Ö —Ü–µ–ª–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å —ç—Ç–æ—Ç –∫—Ä–µ–¥–∏—Ç?""")
        context.chat_data['why_msg_to_reply'] = why_msg.id
        return WHY_CREDIT

    except ValueError:
        if not update.message.text == '–û—Ç–º–µ–Ω–∞':
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
            return REPLY_MESSAGE
        return await cancel(update, context)


async def why_credit(update, context):
    if not update.message.reply_to_message or update.message.reply_to_message.from_user.id != context.bot.id or \
            context.chat_data.get('why_msg_to_reply') != update.message.reply_to_message.id:
        return WHY_CREDIT
    msg = [i.lower() for i in update.message.text.split()]
    amount = context.user_data.get("credit_amount")
    user = update.effective_user
    try:
        if not set(msg).intersection(forbidden):
            daily_percent = calculate_daily_percent(amount)

            global_cursor.execute("""UPDATE users SET balance = balance + ? WHERE userid = ?""",
                                  (amount, user.id))
            global_db.commit()
            global_cursor.execute("""UPDATE credits SET current_credit = current_credit + ? WHERE userid = ?""",
                                  (amount * 1.3 // 1, user.id))
            global_db.commit()
            global_cursor.execute("""UPDATE credits SET daily_payment = ? WHERE userid = ?""",
                                  (((amount * 1.3) * (daily_percent / 100)) // 1, user.id))
            global_db.commit()
            global_cursor.execute("""UPDATE credits SET innate_credit = ? WHERE userid = ?""",
                                  (amount * 1.3 // 1, user.id))
            global_db.commit()
            global_cursor.execute("""UPDATE credits SET credit_obtainment_time = ? WHERE userid = ?""",
                                  (datetime.now().isoformat(), user.id))
            global_db.commit()
            
            context.job_queue.run_repeating(
                callback=lambda context: increase_credit(update=update, context=context),
                                                            # ^ –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è
                interval=3600 * 8,                          # –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                first=3600 * 8,                             # –ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑
                chat_id=update.effective_chat.id,           # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è callback
                data={"user_id": update.effective_user.id}  # –î–æ–ø. –¥–∞–Ω–Ω—ã–µ
            )
            context.job_queue.run_repeating(
                callback=lambda context: pay_credit_time_out(update=update, context=context),
                interval=3600 * 24,
                first=3600 * 24,
                chat_id=update.effective_chat.id,
                data={"user_id": update.effective_user.id}
            )

            await update.message.reply_text(
f'‚úÖ –í—ã–¥–∞—á–∞ –∫—Ä–µ–¥–∏—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞. @{update.effective_user.username}, —Å—Ä–µ–¥—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—É–ø–∏–ª–∏ –Ω–∞ –≤–∞—à —Å—á–µ—Ç. '
f'–ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Å–∏–º –Ω–µ –Ω–∞—Ä—É—à–∞—Ç—å —É—Å–ª–æ–≤–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞ –∏ –≤—ã–ø–ª–∞—á–∏–≤–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ {daily_percent}% –∫—Ä–µ–¥–∏—Ç–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ '
f'(–ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É: "–ö—Ä–µ–¥–∏—Ç").')

        else:
            await update.message.reply_text(
f"‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –Ω–∞—à –±–∞–Ω–∫ –≤—ã–Ω—É–∂–¥–µ–Ω –æ—Ç–∫–∞–∑–∞—Ç—å –≤ –≤—ã–¥–∞—á–µ –∫—Ä–µ–¥–∏—Ç–∞ –≤ —Å–≤—è–∑–∏ —Å –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º–æ–π —Ü–µ–ª—å—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤.")
    except Exception as e:
        logger.log(50, e)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫—Ä–µ–¥–∏—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞ @Profik_X.")

    if context.chat_data.get('is_getting_credit'): del context.chat_data['is_getting_credit']
    if context.user_data.get('credit_amount'): del context.user_data['credit_amount']
    if context.chat_data.get('credit_msg_to_reply'): del context.chat_data['credit_msg_to_reply']
    if context.chat_data.get('why_msg_to_reply'): del context.chat_data['why_msg_to_reply']

    return ConversationHandler.END


async def increase_credit(update, context):
    user = update.effective_user
    amount = global_cursor.execute(
        """SELECT current_credit FROM credits WHERE userid = ?""", (user.id,)).fetchone()[0]
    new_amount = amount * 1.1
    global_cursor.execute("""UPDATE credits SET current_credit = ? WHERE userid = ?""",
                          (new_amount // 1, user.id,))
    global_db.commit()
    await update.message.reply_text(f"üí∏ –ö—Ä–µ–¥–∏—Ç @{user.username} —Ä–∞—Å—Ç–µ—Ç...")


async def pay_credit_time_out(update, context):
    user = update.effective_user
    balance = await get_balance(user)
    credit_amount = global_cursor.execute(
        """SELECT current_credit FROM credits WHERE userid = ?""", (user.id,)).fetchone()[0]

    last_payment_time = global_cursor.execute(
        """SELECT last_payment_time FROM credits WHERE userid = ?""", (user.id,)).fetchone()[0]
    paid_today = global_cursor.execute(
        """SELECT paid_today FROM credits WHERE userid = ?""", (user.id,)).fetchone()[0]
    daily_payment = global_cursor.execute(
        """SELECT daily_payment FROM credits WHERE userid = ?""", (user.id,)).fetchone()[0]

    if last_payment_time:
        if datetime.fromisoformat(last_payment_time) + timedelta(hours=24) <= datetime.now():
            await add_balance(-balance, user)
            if credit_amount - user_balance / 10 // 1 <= 0:
                await context.bot.send_message(chat_id=update.effective_chat.id,
                                               text=
f"""ü©∏ –ö–æ–ª–ª–µ–∫—Ç–æ—Ä—ã –Ω–∞–≤–µ—Å—Ç–∏–ª–∏ @{user.username} –∏ –∏–∑—ä—è–ª–∏ –µ–≥–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –≤ —É–ø–ª–∞—Ç—É –¥–æ–ª–≥–∞. –ù—É–∂–Ω–æ –±—ã–ª–æ –ø–ª–∞—Ç–∏—Ç—å —Ä–∞–Ω—å—à–µ.
–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –µ—â–µ {credit_amount - ((await get_balance(user) / 10) // 1)}.""")
                global_cursor.execute("""UPDATE credits SET current_credit = current_credit - ? WHERE userid = ?""",
                                      (await get_balance(user) / 10 // 1, user.id,))
                global_db.commit()
            else:
                await context.bot.send_message(chat_id=update.effective_chat.id,
                                               text=
f"""ü©∏ –ö–æ–ª–ª–µ–∫—Ç–æ—Ä—ã –Ω–∞–≤–µ—Å—Ç–∏–ª–∏ @{user.username} –∏ –∏–∑—ä—è–ª–∏ –µ–≥–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –≤ —É–ø–ª–∞—Ç—É –¥–æ–ª–≥–∞. –ù—É–∂–Ω–æ –±—ã–ª–æ –ø–ª–∞—Ç–∏—Ç—å —Ä–∞–Ω—å—à–µ.
–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –±–∞–Ω–∫—É –≤—ã–ø–ª–∞—á–µ–Ω–∞, –∫—Ä–µ–¥–∏—Ç –ø–æ–≥–∞—à–µ–Ω.""")
                global_cursor.execute("""UPDATE credits SET current_credit = ? WHERE userid = ?""",
                                      (0, user.id,))
                global_cursor.execute("""UPDATE credits SET paid_today = ? WHERE userid = ?""",
                                      (0, user.id,))
                global_cursor.execute("""UPDATE credits SET last_payment_time = ? WHERE userid = ?""",
                                      (None, user.id,))
                global_db.commit()

            return
    elif paid_today < daily_payment:
        user_balance = await get_balance(user)
        await add_balance(-user_balance, user)

        if credit_amount - user_balance / 10 // 1 <= 0:
            global_cursor.execute("""UPDATE credits SET current_credit = ? WHERE userid = ?""",
                                  (0, user.id,))
            global_cursor.execute("""UPDATE credits SET paid_today = ? WHERE userid = ?""",
                                  (0, user.id,))
            global_cursor.execute("""UPDATE credits SET last_payment_time = ? WHERE userid = ?""",
                                  (None, user.id,))
            global_db.commit()
            await context.bot.send_message(chat_id=update.effective_chat.id,
                                           text=
f"""ü©∏ –ö–æ–ª–ª–µ–∫—Ç–æ—Ä—ã –Ω–∞–≤–µ—Å—Ç–∏–ª–∏ @{user.username} –∏ –∏–∑—ä—è–ª–∏ –µ–≥–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –≤ —É–ø–ª–∞—Ç—É –¥–æ–ª–≥–∞. –°–µ–≥–æ–¥–Ω—è –æ–Ω –∑–∞–ø–ª–∞—Ç–∏–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ.
–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –±–∞–Ω–∫—É –≤—ã–ø–ª–∞—á–µ–Ω–∞, –∫—Ä–µ–¥–∏—Ç –ø–æ–≥–∞—à–µ–Ω.""")

        else:
            global_cursor.execute("""UPDATE credits SET current_credit = current_credit - ? WHERE userid = ?""",
                                  (user_balance / 10 // 1 <= 0, user.id,))

            await context.bot.send_message(chat_id=update.effective_chat.id,
                                           text=
f"""ü©∏ –ö–æ–ª–ª–µ–∫—Ç–æ—Ä—ã –Ω–∞–≤–µ—Å—Ç–∏–ª–∏ @{user.username} –∏ –∏–∑—ä—è–ª–∏ –µ–≥–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –≤ —É–ø–ª–∞—Ç—É –¥–æ–ª–≥–∞. –°–µ–≥–æ–¥–Ω—è –æ–Ω –∑–∞–ø–ª–∞—Ç–∏–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ.
–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –µ—â–µ {credit_amount - ((await get_balance(user) / 10) // 1)}.""")
        global_db.commit()
        return


async def pay_credit(update, context):
    user = update.effective_user
    credit_amount = global_cursor.execute(
        """SELECT current_credit FROM credits WHERE userid = ?""", (user.id,)).fetchone()[0]
    innate_credit = global_cursor.execute(
        """SELECT innate_credit FROM credits WHERE userid = ?""", (user.id,)).fetchone()[0]
    daily_payment = global_cursor.execute(
        """SELECT daily_payment FROM credits WHERE userid = ?""", (user.id,)).fetchone()[0]
    amount_to_pay = int(update.message.text.split()[2])
    user_balance = await get_balance(user)
    if amount_to_pay < credit_amount // 25:
        await update.message.reply_text(
            f"‚ùå –°—É–º–º–∞, –∫–æ–æ—Ç–æ—Ä—É—é –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –≤–Ω–µ—Å—Ç–∏ ({round((amount_to_pay / innate_credit * 100), 1)}% –æ—Ç "
            f"–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –∫—Ä–µ–¥–∏—Ç–∞) —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã ‚îÄ {credit_amount // 25}.")
        return

    if await get_balance(user) < amount_to_pay:
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
        return
    if amount_to_pay > credit_amount:
        amount_to_pay = credit_amount
    await add_balance(-amount_to_pay, user)

    global_cursor.execute("""UPDATE credits SET paid_today = paid_today + ? WHERE userid = ?""",
                          (amount_to_pay, user.id,))
    global_cursor.execute("""UPDATE credits SET current_credit = current_credit - ? WHERE userid = ?""",
                          (amount_to_pay, user.id,))
    global_cursor.execute("""UPDATE credits SET last_payment_time = ? WHERE userid = ?""",
                          (datetime.now().isoformat(), user.id,))
    global_db.commit()

    paid_today = global_cursor.execute(
        """SELECT paid_today FROM credits WHERE userid = ?""", (user.id,)).fetchone()[0]

    if amount_to_pay == credit_amount:
        global_cursor.execute("""UPDATE credits SET paid_today = ? WHERE userid = ?""",
                              (0, user.id,))
        global_cursor.execute("""UPDATE credits SET last_payment_time = ? WHERE userid = ?""",
                              (None, user.id,))

        await update.message.reply_text(f"""üéâ –ö—Ä–µ–¥–∏—Ç, —Å–æ—Å—Ç–∞–≤–ª—è–≤—à–∏–π {innate_credit} –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–ø–ª–∞—á–µ–Ω!""")
        return
    if daily_payment - paid_today <= 0:
        await update.message.reply_text(
            f"‚úÖ –û—á–µ—Ä–µ–¥–Ω—ã–µ {round((amount_to_pay / credit_amount * 100), 1)}% –∫—Ä–µ–¥–∏—Ç–∞ –≤—ã–ø–ª–∞—á–µ–Ω—ã. –û—Å—Ç–∞–ª–æ—Å—å –µ—â–µ "
            f"{credit_amount - amount_to_pay}. –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤–∑–Ω–æ—Å —É–∂–µ –≤—ã–ø–ª–∞—á–µ–Ω.")
        return
    await update.message.reply_text(
        f"‚úÖ –û—á–µ—Ä–µ–¥–Ω—ã–µ {round((amount_to_pay / credit_amount * 100), 1)}% –∫—Ä–µ–¥–∏—Ç–∞ –≤—ã–ø–ª–∞—á–µ–Ω—ã. –û—Å—Ç–∞–ª–æ—Å—å –µ—â–µ "
        f"{credit_amount - amount_to_pay}. –ó–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–ª–∞—Ç–∏—Ç—å –µ—â–µ {daily_payment - amount_to_pay}.")


async def credit(update, context):
    user = update.effective_user
    await check_user(user)

    credit_amount = global_cursor.execute(
        """SELECT current_credit FROM credits WHERE userid = ?""", (user.id,)).fetchone()[0]
    last_time_paid = global_cursor.execute(
        """SELECT last_payment_time FROM credits WHERE userid = ?""", (user.id,)).fetchone()[0]
    paid_today = global_cursor.execute(
        """SELECT paid_today FROM credits WHERE userid = ?""", (user.id,)).fetchone()[0]
    daily_payment = global_cursor.execute(
        """SELECT daily_payment FROM credits WHERE userid = ?""", (user.id,)).fetchone()[0]
    innate_credit = global_cursor.execute(
        """SELECT innate_credit FROM credits WHERE userid = ?""", (user.id,)).fetchone()[0]
    credit_obtainment_time = global_cursor.execute(
        """SELECT credit_obtainment_time FROM credits WHERE userid = ?""", (user.id,)).fetchone()[0]

    if not credit_amount:
        await update.message.reply_text(f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π.",
                                        reply_markup=ReplyKeyboardRemove())
        return
    if context.user_data.get("last_time_checked_credit") and \
        context.user_data.get("last_time_checked_credit") + timedelta(hours=1) < datetime.now():
        await update.message.reply_text(f"‚è≥ –í—ã –Ω–µ–¥–∞–≤–Ω–æ –ø–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞–ª–∏ —Å–≤–æ–π –∫—Ä–µ–¥–∏—Ç–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ "
f"{(datetime.now - (context.user_data.get("last_time_checked_credit") + timedelta(hours=1))).seconds // 60} –º–∏–Ω—É—Ç.",
                                        reply_markup=ReplyKeyboardRemove())
        return

    await update.message.reply_text(
f"""üìë –ö—Ä–µ–¥–∏—Ç–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä @{user.username}:

–ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞: {innate_credit}.
–¢–µ–∫—É—â–∏–π –∫—Ä–µ–¥–∏—Ç: {credit_amount}.
–¢—Ä–µ–±—É–µ–º—ã–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤–∑–Ω–æ—Å: {daily_payment}.
–í—ã–ø–ª–∞—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {paid_today}.
–ü–æ—Å–ª–µ–Ω—è—è –≤—ã–ø–ª–∞—Ç–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏: {get_last_payment_time(last_time_paid)}.

–ß—Ç–æ–±—ã –≤—ã–ø–ª–∞—Ç–∏—Ç—å –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å: ¬´–í—ã–ø–ª–∞—Ç–∏—Ç—å –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å <–ß–∏—Å–ª–æ>¬ª.

–ö—Ä–µ–¥–∏—Ç –≤–∑—è—Ç: {str(datetime.fromisoformat(credit_obtainment_time))[:19]}.

–í—Å–µ –∫—Ä–µ–¥–∏—Ç—ã –≤—ã–¥–∞—é—Ç—Å—è –ø–æ–¥ —Å—Ç–∞–≤–∫—É 30%.
–ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤—ã–ø–ª–∞—á–∏–≤–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –≤–∑–Ω–æ—Å—ã –≤ —Å—Ä–æ–∫ –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º —Å —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–º–∏ —Å–ª—É–∂–±–∞–º–∏.""")
    context.user_data["last_time_checked_credit"] = datetime.now()


def get_last_payment_time(last_payment_time):
    if not last_payment_time:
        return '–µ—â–µ –Ω–µ –ø–ª–∞—Ç–∏–ª–∏'
    hours = (datetime.now() - datetime.fromisoformat(last_payment_time)).seconds / 3600
    if hours < 1:
        return '–º–µ–Ω–µ–µ —á–∞—Å–∞ –Ω–∞–∑–∞–¥'
    if 2 > hours >= 1:
        return '1 —á–∞—Å –Ω–∞–∑–∞–¥'
    if 2 <= hours < 5:
        return f'{hours // 1} —á–∞—Å–∞ –Ω–∞–∑–∞–¥.'
    return f'{hours // 1} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥'


def calculate_daily_percent(credit_amount):
    normalized = (credit_amount - 50) / (10000 - 50)
    percent = 1 + math.sqrt(normalized) * 49

    return max(1.0, min(50.0, round(percent, 1)))


# –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

async def table_recreation(update, context):  # –¥–ª—è MessageHandler-–∞
    global admin_id
    logger.log(20, f'admin_id:{admin_id}')
    logger.log(20, f'eff.user_id:{update.effective_user.id}')
    if str(update.effective_user.id) != admin_id:
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    await asyncio.sleep(0.5)
    await recreate_table_users()
    await recreate_table_credits()
    await update.message.reply_text("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞.")


async def new_members_handler(update, context):
    await check_chat(update, context)
    for user in update.message.new_chat_members:
        need_to_greet = global_cursor.execute("""SELECT show_member_greeting FROM chats WHERE chatid = ?""",
                                              (update.effective_chat.id,))
        greeting = get_greeting_text_for_sys(update.effective_chat.id)
        if not need_to_greet:
            return
        if user.id != context.bot.id:
            if not greeting:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
    text=f"–°—Ç–∞–ª—å–Ω–æ–π —à–µ–ø–æ—Ç —Ä–µ–≤–æ–ª—å–≤–µ—Ä–∞, —â–µ–ª—á–æ–∫ –∫—É—Ä–∫–∞... –¢–µ–Ω–∏ —Å–º–æ—Ç—Ä—è—Ç –≤–∞–º –≤ —Å–ø–∏–Ω—É. –≠—Ç–∞ –ø—É–ª—è - –ø–æ—Å–ª–µ–¥–Ω—è—è –º–∏–ª–æ—Å—Ç—å, "
         f"—á—Ç–æ –≤–∞–º —Å–≤–µ—Ç–∏—Ç, {user.username}...")
            else:
                await context.bot.send_message(chat_id=update.effective_chat.id, text=greeting)
            await add_user(user.username, user.id)

        else:
            chat = update.effective_chat
            add_chat(update, context)
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=(f"–ß—ë—Ä–Ω—ã–µ –ø–ª–∞—â–∏ –Ω–∞–ø–æ–ª–Ω—è—é—Ç —É–ª–∏—Ü—ã... "
                      f"–ü—Ä–∏—Ö–æ–¥–∏—Ç –Ω–æ—á—å. –≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –≤–∞—à ‚Äî –æ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ú–∞—Ñ–∏–∏, "
                      f"–ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏ –æ–±–º–∞–Ω–∞. –ó–¥–µ—Å—å –ø—Ä–∞–≤–∏—Ç –ª–∏—à—å —Ç–∏—à–∏–Ω–∞. –í—ã–±–∏—Ä–∞–π—Ç–µ —Å—Ç–æ—Ä–æ–Ω—É ‚Äî –∏ –∫—Ç–æ –∑–Ω–∞–µ—Ç, —á—Ç–æ –±—É–¥–µ—Ç, "
                      f"–µ—Å–ª–∏ –≤—ã –≤—Å—Ç–∞–Ω–µ—Ç–µ –ø—Ä–æ—Ç–∏–≤ <i>–Ω–∏—Ö</i>..."),
                parse_mode="HTML"
            )
            logger.log(f"–ë–æ—Ç–∞ –¥–æ–±–∞–≤–∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É: {chat.title} (ID: {chat.id})")


async def get_user_by_username(username, context):
    try:
        clean_username = username.lstrip('@')
        '''
        except Exception as e:
            logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {clean_username} —á–µ—Ä–µ–∑ API: {e}")

        return None'''

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_user_by_username: {e}")
        return None


async def add_user_for_sys(update, context):
    username = update.message.text.split()[1]
    user = await get_user_by_username(username, context)
    if user:
        if check_user(user, update, context):
            await update.message.reply_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        await update.message.reply_text("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
        return
    await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
    return


async def messages(update, context):
    if update.message == None: return

    if update.message.dice and update.message.dice.emoji == 'üé∞':
        await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.id)


# –û—Å–Ω —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–π –∑–∞–∫–æ–Ω—á–µ–Ω–∞

def main():
    application = Application.builder().token(BOT_TOKEN).build()



    joinPhandler = MessageHandler(filters.Regex(
r'(?i)(–í—Å—Ç—É–ø–∏—Ç—å –≤ –∏–≥—Ä—É|–í—Å—Ç—É–ø–∏—Ç—å|–°–µ—Å—Ç—å –∑–∞ —Å—Ç–æ–ª|–ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª—à–µ–Ω–∏–µ|/join_poker|/join_poker@MaximusX_bot)'),
                               join_poker)


    setup_poker_handlers(application)

    '''application.add_handler(
        MessageHandler(
            filters.TEXT & ~filters.COMMAND & filters.ChatType.GROUPS,
            dummy_handler, # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            restrict_chat
        )
    )'''

    dice_handler = ConversationHandler(
        entry_points=[CommandHandler("dice", dice_command),
                      MessageHandler(filters.Regex(r'(?i)^(üé≤ –ö—É–±–∏–∫|–ö—É–±–∏–∫|–ö–æ—Å—Ç–∏)$'), dice_command)],
        states={
            BET: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_bet)],
            GAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, dice)]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    slots_handler = ConversationHandler(
        entry_points=[CommandHandler("slots", slots_command),
                      MessageHandler(filters.Regex(r'(?i)^(üé∞ –°–ª–æ—Ç—ã|–°–ª–æ—Ç—ã|–ö–∞–∑–∏–Ω–æ)$'), slots_command)],
        states={
            BET: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_bet)],
            GAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, slots)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    credit_handler = ConversationHandler(
        entry_points=[CommandHandler("getcredit", credit_command),
MessageHandler(filters.Regex(r'(?i)^(–í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç|–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫—Ä–µ–¥–∏—Ç)'), credit_command),
MessageHandler(filters.Regex(r'(?i)^(–í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç|–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫—Ä–µ–¥–∏—Ç)$'), credit_command)],
        states={
            # TAKING_CREDIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, take_credit)],
            REPLY_MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, reply_message_credit)],
            WHY_CREDIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, why_credit)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    application.add_handler(CommandHandler("start", start))

    application.add_handler(MessageHandler(filters.Regex(r'(?i)^(–ë–∞–ª–∞–Ω—Å|/balance|üí∞ –ë–∞–ª–∞–Ω—Å|/balance@MaximusX_bot)$'),
                                           balance))
    application.add_handler(MessageHandler(filters.Regex(r'(?i)^(–ë–∞–ª–∞–Ω—Å|/balance)'), others_balance))
    application.add_handler(MessageHandler(filters.Regex(r"(?i)^(üíµ –†–∞–±–æ—Ç–∞|–†–∞–±–æ—Ç–∞|/work@MaximusX_bot|/work)$"),
                                           work))
    application.add_handler(MessageHandler(filters.Regex(r"(?i)^(–ö—Ä–µ–¥–∏—Ç|–ú–æ–π –∫—Ä–µ–¥–∏—Ç)$"), credit))
    application.add_handler(MessageHandler(filters.Regex(
        r"(?i)^(–í—ã–ø–ª–∞—Ç–∏—Ç—å –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å|–í–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É|–í—ã–ø–ª–∞—Ç–∏—Ç—å –∫—Ä–µ–¥–∏—Ç)"),
        pay_credit))

    application.add_handler(dice_handler)
    application.add_handler(slots_handler)
    application.add_handler(credit_handler)

    application.add_handler(MessageHandler(
        filters.TEXT & filters.Regex(r"(?i)^–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É$") & ~filters.COMMAND, table_recreation))

    application.add_handler(MessageHandler(filters.Regex(
        r"(?i)^(–í—ã–ø–∏—Å–∞—Ç—å —Å—á–µ—Ç|–í—ã–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç|–í—ã–ø–∏—Å–∞—Ç—å —á–µ–∫|–í—ã–ø–ª–∞—Ç–∏—Ç—å —á–µ–∫|/add_money)"), add_money))
    application.add_handler(MessageHandler(filters.Regex(
        r"(?i)^(–ó–∞–ø–ª–∞—Ç–∏—Ç—å|–ü–µ—Ä–µ–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏|–í—ã–ø–∏—Å–∞—Ç—å —á–µ–∫|/pay)"), transfer_money))

    # application.add_handler(MessageHandler(filters.Regex(r"(?i)^(–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è|/add_user)"),
    #                                                              add_user_for_sys))

    application.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, new_members_handler))

    # application.add_handler(CallbackQueryHandler(handle_query))

    '''application.add_handler(MessageHandler(filters.Regex(r'^(–û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö|/bd_update)$'),
                                           add_new_group_members))'''

    application.add_handler(MessageHandler(filters.Regex(r'(?i)^(–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ|–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ|/get_greeting)$'),
                                           get_greeting_text))

    application.add_handler(MessageHandler(filters.Regex(r'(?i)^(–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ|/change_greeting)'),
        set_greeting_text))

    application.add_handler(MessageHandler(
        filters.Regex(r'(?i)^(\+–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ|/show_greeting)$'),
        change_greeting_to_show))

    application.add_handler(MessageHandler(
        filters.Regex(r'(?i)^(\-–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ|/hide_greeting)$'),
        change_greeting_to_hide))
    
    # application.add_handler(MessageHandler(filters.TEXT, ...))

    application.add_handler(MessageHandler(filters.ALL, messages))

    application.run_polling()


if __name__ == "__main__":
    main()